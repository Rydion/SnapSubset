/**********************/
/*******OBJECTS********/
/**********************/

/* delete */
/* {passthrough} !*/

/***** functions */

/*@{
	var,
	name: isSnapObject,
	class: Function,
	return: Boolean,
	parameters: {
		{name: thing, class: Object}
	}
}!*/

/***** \functions */



/**** SpriteMorph */

/*@{
	var,
	name: SpriteMorph,
	class: Function,
	return: SpriteMorph,
	parameters: {
		{name: globals, class: VariableFrame}
	}
}!*/

/*@{
	name: SpriteMorph,
	class: PenMorph,
	properties: {
		{name: parentThatIsA, class: Function, return: {IDE_Morph, StageMorph} },
		{name: nestingInfo, class: Joker},
		{name: parent, class: {StageMorph, HandMorph} },
		
		{name: constructor, class: Function, return: SpriteMorph},
		{name: uber, class: PenMorph},
		{name: init, class: Function, parameters: {
													{name: globals, class: VariableFrame}
												  }
		},

		{name: categories, class: List, type: String},
		{name: blockColor, class: Object, properties: {
														{name: motion, class: Color},
														{name: looks, class: Color},
														{name: sound, class: Color},
														{name: pen, class: Color},
														{name: control, class: Color},
														{name: sensing, class: Color},
														{name: operators, class: Color},
														{name: variables, class: Color},
														{name: lists, class: Color},
														{name: other, class: Color},
														{name: [], class: Color}
													  }
		},
		{name: paletteColor, class: Color},
		{name: paletteTextColor, class: Color},
		{name: sliderColor, class: Color},
		{name: isCachingPrimitives, class: Boolean},
		
		{name: enableNesting, class: Boolean},
		{name: enableFirstClass, class: Boolean},
		{name: useFlatLineEnds, class: Boolean},
		{name: highlightColor, class: Color},
		{name: highlightBorder, class: Number},
		
		{name: bubbleColor, class: Color},
		{name: bubbleFontSize, class: Number},
		{name: bubbleFontIsBold, class: Boolean},
		{name: bubbleCorner, class: Number},
		{name: bubbleBorder, class: Number},
		{name: bubbleBorderColor, class: Color},
		{name: bubbleMaxTextWidth, class: Number},

		{name: initBlocks, class: Function},
		{name: blocks, class: Array, type: Joker},
		
		{name: initBlockMigrations, class: Function},
		{name: blockMigrations, class: Object, properties: {
															{name: doStopAll, class: Object, properties: {{name: selector, class: String}, {name: inputs, class: {class: Array, type: {{class: Array, type: String}} } }} },
															{name: doStop, class: Object, properties: {{name: selector, class: String}, {name: inputs, class: {class: Array, type: {{class: Array, type: String}} } }} },
															{name: doStopBlock, class: Object, properties: {{name: selector, class: String}, {name: inputs, class: {class: Array, type: {{class: Array, type: String}} } }} },
															{name: receiveClick, class: Object, properties: {{name: selector, class: String}, {name: inputs, class: {class: Array, type: {{class: Array, type: String}} } }} }
														   }
		},
		
		{name: blockAlternatives, class: Object, properties: {
																{name: turn, class: Array, type: String},
																{name: turnLeft, class: Array, type: String},
																{name: changeXPosition, class: Array, type: String},
																{name: setXPosition, class: Array, type: String},
																{name: changeYPosition, class: Array, type: String},
																{name: setYPosition, class: Array, type: String},
																{name: xPosition, class: Array, type: String},
																{name: yPosition, class: Array, type: String},
																
																{name: doSayFor, class: Array, type: String},
																{name: doThinkFor, class: Array, type: String},
																{name: bubble, class: Array, type: String},
																{name: doThink, class: Array, type: String},
																{name: show, class: Array, type: String},
																{name: hide, class: Array, type: String},
																{name: changeEffect, class: Array, type: String},
																{name: setEffect, class: Array, type: String},
																{name: changeScale, class: Array, type: String},
																{name: setScale, class: Array, type: String},
																
																{name: playSound, class: Array, type: String},
																{name: doPlaySoundUntilDone, class: Array, type: String},
																{name: doChangeTempo, class: Array, type: String},
																{name: doSetTempo, class: Array, type: String},
																
																{name: clear, class: Array, type: String},
																{name: down, class: Array, type: String},
																{name: up, class: Array, type: String},
																{name: doStamp, class: Array, type: String},
																{name: changeHue, class: Array, type: String},
																{name: setHue, class: Array, type: String},
																{name: changeBrightness, class: Array, type: String},
																{name: setBrightness, class: Array, type: String},
																{name: changeSize, class: Array, type: String},
																{name: setSize, class: Array, type: String},
																
																{name: doBroadcast, class: Array, type: String},
																{name: doBroadcastAndWait, class: Array, type: String},
																{name: doIf, class: Array, type: String},
																{name: doIfElse, class: Array, type: String},
																{name: doRepeat, class: Array, type: String},
																{name: doUntil, class: Array, type: String},
																
																{name: doAsk, class: Array, type: String},
																{name: getLastAnswer, class: Array, type: String},
																{name: getTimer, class: Array, type: String},
																{name: reportMouseX, class: Array, type: String},
																{name: reportMouseY, class: Array, type: String},
																
																{name: reportSum, class: Array, type: String},
																{name: reportDifference, class: Array, type: String},
																{name: reportProduct, class: Array, type: String},
																{name: reportQuotient, class: Array, type: String},
																{name: reportLessThan, class: Array, type: String},
																{name: reportEquals, class: Array, type: String},
																{name: reportGreaterThan, class: Array, type: String},
																{name: reportAnd, class: Array, type: String},
																{name: reportOr, class: Array, type: String},
																{name: reportTrue, class: Array, type: String},
																{name: reportFalse, class: Array, type: String},
																
																{name: doSetVar, class: Array, type: String},
																{name: doChangeVar, class: Array, type: String},
																{name: doShowVar, class: Array, type: String},
																{name: doHideVar, class: Array, type: String}
															 }
		},
		
		{name: name, class: String},
		{name: variables, class: VariableFrame},
		{name: scripts, class: ScriptsMorph},
		{name: customBlocks, class: Array, type: Joker},
		{name: costumes, class: List},
		{name: costume, class: {Costume, SVG_Costume} },
		{name: sounds, class: List},
		{name: normalExtent, class: Point},
		{name: scale, class: Number},
		{name: rotationStyle, class: Number},
		{name: version, class: Date},
		{name: isClone, class: Boolean},
		{name: isCorpse, class: Boolean},
		{name: cloneOriginName, class: String},
		
		{name: parts, class: Array, type: String},
		{name: anchor, class: Joker},
		{name: nestingScale, class: Number},
		{name: rotatesWithAnchor, class: Boolean},
		{name: layers, class: Joker},
		
		{name: blocksCache, class: Object},
		{name: paletteCache, class: Object},
		{name: rotationOffset, class: Point},
		{name: idx, class: Number},
		{name: wasWarped, class: Boolean},
		
		{name: graphicsValues, class: Object, properties: {
															{name: negative, class: Number},
															{name: fisheye, class: Number},
															{name: whirl, class: Number},
															{name: pixelate, class: Number},
															{name: mosaic, class: Number},
															{name: brightness, class: Number},
															{name: color, class: Number},
															{name: comic, class: Number},
															{name: duplicate, class: Number},
															{name: confetti, class: Number}
														  }
		},
		{name: exemplar, class: Joker},

		{name: fullCopy, class: Function, return: SpriteMorph, parameters: {
																				{name: forClone, class: Boolean}
																		   }
		},
		
		{name: setName, class: Function, parameters: {
														{name: string, class: String}
													 }
		},
		
		{name: drawNew, class: Function},
		{name: endWarp, class: Function},
		{name: rotationCenter, class: Function, return: Point},
		
		{name: colorFiltered, class: Function, return: Morph, parameters: {
																			{name: aColor, class: Color}
																		  }
		},
		
		{name: blockForSelector, class: Function,
		 return: {CommandBlockMorph, HatBlockMorph, RingMorph, ReporterBlockMorph},
		 parameters: {
						{name: selector, class: String},
						{name: setDefaults, class: Boolean}
					  }
		},
		{name: variableBlock, class: Function, return: ReporterBlockMorph, parameters: {
																							{name: varName, class: String}
																						   }
		},
		
		{name: addCostume, class: Function, parameters: {
															{name: costume, class: {Costume, SVG_Costume} }
														   }
		},
		{name: wearCostume, class: Function, parameters: {
															{name: costume, class: {Costume, SVG_Costume} }
														 }
		},
		{name: getCostumeIdx, class: Function, return: Number},
		{name: doWearNextCostume, class: Function},
		{name: doWearPreviousCostume, class: Function},
		{name: doSwitchToCostume, class: Function, parameters: {
																{name: id, class: Number}
															   }
		},
		{name: reportCostumes, class: Function, return: List},
		{name: addSound, class: Function, parameters: {
														{name: audio, class: HTMLAudioElement},
														{name: name, class: String}
													  }
		},
		{name: playSound, class: Function, parameters: {
														{name: name, class: String}
													   }
		},
		{name: reportSounds, class: Function, return: List},
		{name: userMenu, class: Function, return: MenuMorph},
		{name: showOnStage, class: Function},
		{name: createClone, class: Function},
		{name: clonify, class: Function, parameters: {
														{name: stage, class: StageMorph}
													 }
		},
		{name: removeClone, class: Function},
		{name: corpsify, class: Function},
		{name: hide, class: Function},
		{name: show, class: Function},
		{name: setColor, class: Function, parameters: {
														{name: aColor, class: Color}
													  }
		},
		{name: getHue, class: Function, return: Number},
		{name: setHue, class: Function, parameters: {
														{name: num, class: Number}
													}
		},
		{name: changeHue, class: Function, parameters: {
														{name: delta, class: Number}
													   }
		},
		{name: getBrightness, class: Function, return: Number},
		{name: setBrightness, class: Function, parameters: {
															{name: num, class: Number}
														   }
		},
		{name: changeBrightness, class: Function, parameters: {
																{name: delta, class: Number}
															  }
		},
		{name: comeToFront, class: Function},
		{name: goBack, class: Function, parameters: {
														{name: layers, class: Number}
													}
		},
		
		{name: overlappingImage, class: Function, return: HTMLCanvasElement, parameters: {
																							{name: otherSprite, class: SpriteMorph}
																						 }
		},
		
		{name: doStamp, class: Function},
		{name: clear, class: Function},
		
		{name: setSize, class: Function, parameters: {
														{name: size, class: Number}
													 }
		},
		{name: changeSize, class: Function, parameters: {
															{name: delta, class: Number}
														}
		},
		
		{name: getScale, class: Function, return: Number},
		{name: setScale, class: Function, parameters: {
														{name: percentage, class: Number}
													  }
		},
		{name: changeScale, class: Function, parameters: {
																{name: delta, class: Number}
															}
		},
		
		{name: graphicsChanged, class: Function, return: Boolean},
		{name: applyGraphicsEffects, class: Function, return: HTMLCanvasElement, parameters: {
																									{name: canvas, class: HTMLCanvasElement}
																								 }
		},
		
		{name: setEffect, class: Function, parameters: {
															{name: effect, class: Array, type: String},
															{name: value, class: Number}
														  }
		},
		{name: getGhostEffect, class: Function, return: Number},
		{name: changeEffect, class: Function, parameters: {
																{name: effect, class: Array, type: String},
																{name: value, class: Number}
															 }
		},
		{name: clearEffects, class: Function},

		{name: stopTalking, class: Function},
		{name: doThink, class: Function, parameters: {
															{name: data, class: String}
														}
		},
		{name: bubble, class: Function, parameters: {
															{name: data, class: String},
															{name: isThought, class: Boolean},
															{name: isQuestion, class: Boolean}
													   }
		},
		{name: talkBubble, class: Function, return: Joker},
		{name: positionTalkBubble, class: Function},
		
		{name: prepareToBeGrabbed, class: Function, parameters: {
																	{name: hand, class: HandMorph}
																   }
		},
		{name: isCorrectingOutsideDrag, class: Function, return: Boolean},
		{name: justDropped, class: Function},
		{name: drawLine, class: Function, parameters: {
															{name: start, class: Point},
															{name: dest, class: Point}
														 }
		},
		
		{name: moveBy, class: Function, parameters: {
															{name: delta, class: Number},
															{name: justMe, class: Boolean}
													   }
		},
		{name: silentMoveBy, class: Function, parameters: {
																{name: delta, class: Number},
																{name: justMe, class: Boolean}
															 }
		},
		{name: rootForGrab, class: Function, return: Node},
		{name: slideBackTo, class: Function, parameters: {
																{name: situation, class: Rectangle},
																{name: inSteps, class: Number}
															}
		},
		{name: setCenter, class: Function, parameters: {
															{name: aPoint, class: Point},
															{name: justMe, class: Boolean}
														  }
		},
		{name: nestingBounds, class: Function, return: Rectangle},
		
		{name: setPosition, class: Function, parameters: {
																{name: aPoint, class: Point},
																{name: justMe, class: Boolean}
															}
		},
		{name: forward, class: Function, parameters: {
															{name: steps, class: Number}
														}
		},
		{name: setHeading, class: Function, parameters: {
																{name: degrees, class: Number}
														   }
		},
		{name: faceToXY, class: Function, parameters: {
																{name: x, class: Number},
																{name: y, class: Number}
														   }
		},
		{name: turn, class: Function, parameters: {
														{name: degrees, class: Number}
													 }
		},
		{name: turnLeft, class: Function, parameters: {
															{name: degrees, class: Number}
														 }
		},
		{name: xPosition, class: Function, return: Number},
		{name: yPosition, class: Function, return: Number},
		{name: direction, class: Function, return: Number},
		{name: penSize, class: Function, return: Number},
		{name: gotoXY, class: Function, parameters: {
															{name: x, class: Number},
															{name: y, class: Number},
															{name: justMe, class: Boolean}
													   }
		},
		{name: silentGotoXY, class: Function, parameters: {
																{name: x, class: Number},
																{name: y, class: Number},
																{name: justMe, class: Boolean}
															 }
		},
		{name: setXPosition, class: Function, parameters: {
																{name: num, class: Number}
															}
		},
		{name: changeXPosition, class: Function, parameters: {
																	{name: delta, class: Number}
																}
		},
		{name: setYPosition, class: Function, parameters: {
																{name: num, class: Number}
															 }
		},
		{name: changeYPosition, class: Function, parameters: {
																	{name: delta, class: Number}
																}
		},
		{name: glide, class: Function, parameters: {
														{name: duration, class: Number},
														{name: endX, class: Number},
														{name: endY, class: Number},
														{name: elapsed, class: Number},
														{name: startPoint, class: Point}
													  }
		},
		{name: bounceOffEdge, class: Function},
		
		{name: allMessageNames, class: Function, return: {{class: Array, type: String}} },
		{name: allHatBlocksFor, class: Function, return: {{class: Array, type: HatBlockMorph}}, parameters: {
																													{name: message, class: String}
																												}
		},
		{name: allHatBlocksForKey, class: Function, return: {{class: Array, type: HatBlockMorph}}, parameters: {
																														{name: key, class: String}
																													 }
		},
		{name: allHatBlocksForInteraction, class: Function, return: {{class: Array, type: HatBlockMorph}}, parameters: {
																																{name: interaction, class: String}
																															 }
		},
		{name: allGenericHatBlocks, class: Function, return: Boolean},
		{name: mouseClickLeft, class: Function, return: {{class: Array, type: Process}} },
		{name: mouseEnter, class: Function, return: {{class: Array, type: Process}} },
		{name: mouseDownLeft, class: Function, return: {{class: Array, type: Process}} },
		{name: receiveUserInteraction, class: Function, return: {{class: Array, type: Process}}, parameters: {
																													{name: interaction, class: String}
																												   }
		},
		
		{name: getTimer, class: Function, return: Number},
		{name: getTempo, class: Function, return: Number},
		
		{name: getLastMessage, class: Function, return: String},
		{name: getLastAnswer, class: Function, return: String},
		
		{name: reportMouseX, class: Function, return: Number},
		{name: reportMouseY, class: Function, return: Number},
		
		{name: reportThreadCount, class: Function, return: Number},
		
		{name: deleteAllBlockInstances, class: Function, parameters: {
																			{name: definition, class: CustomBlockDefinition}
																		}
		},
		{name: allBlockInstances, class: Function, return: {{class: Array, type: {CustomCommandBlockMorph}} },
		 parameters: {
						{name: definition, class: CustomBlockDefinition}
					 }
		},
		{name: allLocalBlockInstances, class: Function, return: {{class: Array, type: {CustomCommandBlockMorph}} }, 
		 parameters: {
						{name: definition, class: CustomBlockDefinition}
					 }
		},
		{name: allEditorBlockInstances, class: Function, return: {{class: Array, type: Joker}}, 
		 parameters: {
						{name: definition, class: CustomBlockDefinition}
					 }
		},

		{name: thumbnail, class: Function, return: HTMLCanvasElement, parameters: {
																					{name: extentPoint, class: Point}
																				  }
		},
		
		{name: booleanMorph, class: Function, return: ReporterBlockMorph, parameters: {
																						{name: bool, class: Boolean}
																					  }
		},
		
		{name: attachPart, class: Function, parameters: {
															{name: aSprite, class: SpriteMorph}
														}
		},
		{name: detachPart, class: Function, parameters: {
															{name: aSprite, class: SpriteMorph}
														}
		},
		{name: detachAllParts, class: Function},
		{name: detachFromAnchor, class: Function},
		{name: allParts, class: Function, return: {{class: Array, type: SpriteMorph}} },
		{name: allAnchors, class: Function, return: {{class: Array, type: SpriteMorph}} },
		{name: recordLayers, class: Function},
		{name: restoreLayers, class: Function},
		
		{name: addHighlight, class: Function, return: SpriteHighlightMorph, parameters: {
																							{name: oldHighlight, class: SpriteHighlightMorph}
																						}
		},
		{name: removeHighlight, class: Function, return: SpriteHighlightMorph},
		{name: toggleHighlight, class: Function},
		{name: highlight, class: Function, return: SpriteHighlightMorph, parameters: {
																						{name: color, class: Color},
																						{name: border, class: Number}
																					 }
		},
		{name: highlightImage, class: Function, return: HTMLCanvasElement, parameters: {
																							{name: color, class: Color},
																							{name: border, class: Number}
																					   }
		},
		{name: getHighlight, class: Function, return: SpriteHighlightMorph}
		
	}
}!*/

/* \SpriteMorph */



/* SpriteHighlightMorph */

/*@{
	var,
	name: SpriteHighlightMorph,
	class: Function,
	return: SpriteHighlightMorph
}!*/

/*@{
	name: SpriteHighlightMorph,
	class: Morph
}!*/

/* \SpriteHighlightMorph */



/* StageMorph */

/*@{
	var,
	name: StageMorph,
	class: Function,
	return: StageMorph,
	parameters: {
		{name: globals, class: VariableFrame}
	}
}!*/

/*@{
	name: StageMorph,
	class: FrameMorph,
	properties: {
		{name: parentThatIsA, class: Function, return: IDE_Morph},
	
		{name: keyPressed, class: Joker},
	
		{name: constructor, class: Function, return: StageMorph},
		{name: uber, class: FrameMorph},
		
		{name: init, class: Function, parameters: {
													{name: globals, class: VariableFrame}
												  }
		},
		
		{name: dimensions, class: Point},
		{name: frameRate, class: Number},
		{name: isCachingPrimitives, class: Boolean},
		{name: sliderColor, class: Color},
		{name: paletteTextColor, class: Color},
		{name: hiddenPrimitives, class: Object},
		{name: codeMappings, class: Object},
		{name: codeHeaders, class: Object},
		{name: enableCodeMapping, class: Boolean},
		{name: enableInheritance, class: Boolean},
		{name: name, class: String},
		{name: threads, class: ThreadManager},
		{name: variables, class: VariableFrame},
		{name: scripts, class: ScriptsMorph},
		{name: customBlocks, class: Array, type: Joker},
		{name: globalBlocks, class: Array, type: Joker},
		{name: costumes, class: List},
		{name: costume, class: Joker},
		{name: sounds, class: List},
		{name: version, class: Number},
		{name: isFastTracked, class: Boolean},
		{name: enableCustomHatBlocks, class: Boolean},
		{name: cloneCount, class: Number},
		{name: timerStart, class: Number},
		{name: tempo, class: Number},
		{name: lastMessage, class: String},
		{name: watcherUpdateFrequency, class: Number},
		{name: lastWatcherUpdate, class: Number},
		{name: scale, class: Number},
		{name: keysPressed, class: Object},
		{name: blocksCache, class: Object},
		{name: paletteCache, class: Object},
		{name: lastAnswer, class: String},
		{name: activeSounds, class: Array, type: Joker},
		{name: trailsCanvas, class: Joker},
		{name: isThreadSafe, class: Boolean},
		{name: graphicsValues, class: Object, properties: {
															{name: negative, class: Number},
															{name: fisheye, class: Number},
															{name: whirl, class: Number},
															{name: pixelate, class: Number},
															{name: mosaic, class: Number},
															{name: brightness, class: Number},
															{name: color, class: Number},
															{name: comic, class: Number},
															{name: duplicate, class: Number},
															{name: confetti, class: Number}
														  }
		},
		
		{name: setScale, class: Function, parameters: {
														{name: number, class: Number}
													  }
		},
		{name: drawNew, class: Function},
		{name: drawOn, class: Function, return: null, parameters: {
																	{name: aCanvas, class: HTMLCanvasElement},
																	{name: aRect, class: Rectangle}
																  }
		},
		{name: clearPenTrails, class: Function},
		{name: penTrails, class: Function, return: HTMLCanvasElement},
		{name: penTrailsMorph, class: Function, return: Morph},
		{name: colorFiltered, class: Function, return: Morph, parameters: {
																			{name: aColor, class: Color},
																			{name: excludedSprite, class: Joker}
																		  }
		},
		{name: watchers, class: Function, return: {{class: Array, type: Joker}} , parameters: {
																								{name: leftPos, class: Number}
																							  }
		},
		{name: resetTimer, class: Function},
		{name: getTimer, class: Function, return: Number},
		{name: setTempo, class: Function, parameters: {
														{name: bpm, class: Number}
													  }
		},
		{name: changeTempo, class: Function, parameters: {
															{name: delta, class: Number}
														 }
		},
		{name: getTempo, class: Function, return: Number},
		{name: getLastMessage, class: Function, return: String},
		{name: reportMouseX, class: Function, return: Number},
		{name: reportMouseY, class: Function, return: Number},
		{name: wantsDropOf, class: Function, return: Boolean, parameters: {
																			{name: aMorph, class: Morph}
																		  }
		},
		{name: step, class: Function},
		{name: stepGenericConditions, class: Function, parameters: {
																	{name: stopAll, class: Boolean}
																   }
		},
		{name: processKeyDown, class: Function, parameters: {
																{name: event, class: Event}
															}
		},
		{name: processKeyUp, class: Function, parameters: {
															{name: event, class: Event}
														  }
		},
		{name: processKeyEvent, class: Function, parameters: {
																{name: event, class: Event},
																{name: action, class: Function}
															 }
		},
		{name: fireKeyEvent, class: Function, parameters: {
															{name: key, class: String}
														  }
		},
		{name: removePressedKey, class: Function, parameters: {
																{name: key, class: String}
															  }
		},
		{name: processKeyPress, class: Function, parameters: {
																{name: event, class: Event}
															 }
		},
		{name: inspectKeyEvent, class: Function, return: Joker},
		{name: fireGreenFlagEvent, class: Function, return: {{class: Array, type: Process}} },
		{name: clear, class: Function},
		{name: removeAllClones, class: Function},
		{name: clearPenTrails, class: Function},
		{name: userMenu, class: Function, return: MenuMorph},
		{name: showAll, class: Function},
		{name: edit, class: Function},
		{name: hide, class: Function},
		{name: show, class: Function},
		{name: createClone, class: Function},
		{name: addCostume, class: Function, parameters: {
															{name: costume, class: {Costume, SVG_Costume} }
														}
		},
		{name: wearCostume, class: Function, parameters: {
															{name: costume, class: {Costume, SVG_Costume} }
														 }
		},
		{name: getCostumeIdx, class: Function, return: Number},
		{name: doWearNextCostume, class: Function},
		{name: doWearPreviousCostume, class: Function},
		{name: doSwitchToCostume, class: Function, parameters: {
																{name: id, class: Number}
															   }
		},
		{name: reportCostumes, class: Function, return: List},
		{name: graphicsChanged, class: Function, return: Boolean},
		{name: applyGraphicsEffects, class: Function, return: HTMLCanvasElement, parameters: {
																								{name: canvas, class: HTMLCanvasElement}
																							 }
		},
		
		{name: setEffect, class: Function, parameters: {
														{name: effect, class: Array, type: String},
														{name: value, class: Number}
													   }
		},
		{name: getGhostEffect, class: Function, return: Number},
		{name: changeEffect, class: Function, parameters: {
															{name: effect, class: Array, type: String},
															{name: value, class: Number}
														  }
		},
		{name: clearEffects, class: Function},

		{name: addSound, class: Function, parameters: {
														{name: audio, class: HTMLAudioElement},
														{name: name, class: String}
													  }
		},
		{name: playSound, class: Function, parameters: {
														{name: name, class: String}
													   }
		},
		{name: stopAllActiveSounds, class: Function},
		{name: pauseAllActiveSounds, class: Function},
		{name: resumeAllActiveSounds, class: Function},
		{name: reportSounds, class: Function, return: List},
		
		{name: allHatBlocksFor, class: Function, return: {{class: Array, type: HatBlockMorph}} },
		{name: allHatBlocksForKey, class: Function, return: {{class: Array, type: HatBlockMorph}} },
		{name: allHatBlocksForInteraction, class: Function, return: {{class: Array, type: HatBlockMorph}} },
		{name: allGenericHatBlocks, class: Function, return: Boolean},
		{name: mouseClickLeft, class: Function, return: {{class: Array, type: Process}} },
		{name: mouseEnter, class: Function, return: {{class: Array, type: Process}} },
		{name: mouseDownLeft, class: Function, return: {{class: Array, type: Process}} },
		{name: receiveUserInteraction, class: Function, return: {{class: Array, type: Process}}, parameters: {
																												{name: interaction, class: String}
																											 }
		}
	}
}!*/

/***** \StageMorph */



/***** SpriteBubbleMorph */

/*@{
	var,
	name: SpriteBubbleMorph,
	class: Function,
	return: SpriteBubbleMorph,
	parameters: {
		{name: data, class: {Morph, Boolean, Costume, HTMLCanvasElement, List, Context, String} },
		{name: stage, class: Stage},
		{name: isThought, class: Boolean},
		{name: isQuestion, class: Boolean}
	}
}!*/

/*@{
	name: SpriteBubbleMorph,
	class: SpeechBubbleMorph,
	properties: {
		{name: constructor, class: Function, return: SpriteBubbleMorph},
		{name: uber, class: SpeechBubbleMorph},
		
		{name: init, class: Function, parameters: {
													{name: data, class: {Morph, Boolean, Costume, HTMLCanvasElement, List, Context, String} },
													{name: stage, class: StageMorph},
													{name: isThought, class: Boolean},
													{name: isQuestion, class: Boolean}
												  }
		},
		
		{name: data, class: {Morph, Boolean, Costume, HTMLCanvasElement, List, Context, String} },
		{name: stage, class: StageMorph},
		{name: scale, class: Number},
		{name: isThought, class: Boolean},
		{name: isQuestion, class: Boolean},
		
		{name: dataAsMorph, class: Function, return: TextMorph, parameters: {
																				{name: data, class: {Morph, Boolean, Costume, HTMLCanvasElement, List, Context, String, SpriteMorph, StageMorph} },
																				{name: toggle, class: Boolean}
																			}
		},
		{name: setScale, class: Function, parameters: {
														{name: scale, class: Number}
													  }
		},
		{name: drawNew, class: Function, parameters: {
														{name: toggle, class: Boolean}
													 }
		},
		{name: fixLayout, class: Function}
	}
}
!*/

/***** \SpriteBubbleMorph */



/***** Costume */

/*@{
	var,
	name: Costume,
	class: Function,
	return: Costume,
	parameters: {
		{name: canvas, class: HTMLCanvasElement},
		{name: name, class: String},
		{name: rotationCenter, class: Point}
	}
}!*/

/*@{
	name: Costume,
	class: Object,
	return: Costume,
	properties: {
		{name: contents, class: HTMLCanvasElement},
		{name: name, class: String},
		{name: rotationCenter, class: Point},
		{name: version, class: Number},
		{name: loaded, class: {Boolean, Function} },
		
		{name: maxExtent, class: Function, return: Point},
		{name: toString, class: Function, return: String},
		
		{name: extent, class: Function, return: Point},
		{name: center, class: Function, return: Point},
		{name: width, class: Function, return: Number},
		{name: height, class: Function, return: Number},
		{name: bounds, class: Function, return: Rectangle},
		
		{name: shrinkWrap, class: Function},
		{name: boundingBox, class: Function, return: Rectangle},
		
		{name: copy, class: Function, return: Costume},
		
		{name: flipped, class: Function, return: Costume},
		{name: thumbnail, class: Function, return: HTMLCanvasElement, parameters: {
																					{name: extentPoint, class: Point}
																				  }
		},
		{name: isTainted, class: Function, return: Boolean}
	}
}!*/

/**** \Costume */



/* SVG_Costume */

/*@
{
	var,
	name: SVG_Costume,
	class: Function,
	return: SVG_Costume,
	parameters:
	{
		{name: svgImage, class: HTMLImageElement},
		{name: name, class: String},
		{name: rotationCenter, class: Point}
	}
}
!*/

/*@
{
	name: SVG_Costume,
	class: Costume,
	properties: 
	{
		{name: contents, class: HTMLImageElement},
	
		{name: constructor, class: Function, return: SVG_Costume},
		{name: uber, class: Costume},
	
		{name: toString, class: String},
		{name: copy, class: Function, return: Costume}
	}
}
!*/

/* \SVG_Costume */



/**** Costume Editor */

/**** \Costume Editor */



/***** Sound */

/*@{
	var,
	name: Sound,
	class: Function,
	return: Sound,
	parameters: {
		{name: audio, class: HTMLAudioElement},
		{name: name, class: String}
	}
}!*/

/*@{
	name: Sound,
	class: Object,
	properties: {
		{name: audio, class: HTMLAudioElement},
		{name: name, class: String},
		
		{name: play, class: Function, return: HTMLAudioElement},
		{name: copy, class: Function, return: Sound},
		{name: toDataURL, class: Function, return: String}
	}
}!*/

/***** \Sound */



/***** Note */

/*@{
	var,
	name: Note,
	class: Function,
	return: Note,
	parameters: {
		{name: pitch, class: Number}
	}
}!*/

//!! AudioContext is defined in system

/*@{
	name: Note,
	class: Object,
	properties: {
		{name: pitch, class: Number},
		{name: oscillator, class: OscillatorNode},
		{name: audioContext, class: AudioContext},
		{name: gainNode, class: GainNode},
		
		{name: setupContext, class: Function},
		{name: play, class: Function},
		{name: stop, class: Function}
	}
}!*/

/***** \Note */



/* CellMorph */

/*@{
	var,
	name: CellMorph,
	class: Function,
	return: CellMorph,
	parameters: {
		{name: contents, class: Joker},
		{name: color, class: Color},
		{name: idx, class: Number},
		{name: parentCell, class: CellMorph}
	}
}!*/

/*@{
	name: CellMorph,
	class: BoxMorph,
	return: CellMorph,
	properties: {
		{name: parentThatIsA, class: Function, return: ListWatcherMorph},
		{name: parent, class: {ListWatcherMorph} },
	
		{name: constructor, class: Function, return: CellMorph},
		{name: uber, class: BoxMorph},
		
		{name: init, class: Function, parameters: {
													{name: contents, class: Joker},
													{name: color, class: Color},
													{name: idx, class: Number},
													{name: parentCell, class: CellMorph}
												  }
		},
		
		{name: contents, class: Joker},
		{name: isEditable, class: Boolean},
		{name: idx, class: Number},
		{name: parentCell, class: CellMorph},
		{name: contentsMorph, class: {ListWatcherMorph, TextMorph, TableFrameMorph} },
		{name: isBig, class: Boolean},
		
		{name: big, class: Function},
		{name: normal, class: Function},
		
		{name: isCircular, class: Function, return: Boolean, parameters: {
																			{name: list, class: List}
																		 }
		},
		{name: fixLayout, class: Function},
		{name: drawNew, class: Function, parameters: {
														{name: toggle, class: Boolean},
														{name: type, class: String}
													 }
		},
		{name: drawShadow, class: Function, parameters: {
															{name: context, class: CanvasRenderingContext2D},
															{name: radius, class: Number},
															{name: inset, class: Number}
														}
		},
		{name: layoutChanged, class: Function},
		{name: reactToEdit, class: Function, parameters: {
															{name: textMorph, class: TextMorph}
														 }
		},
		{name: mouseClickLeft, class: Function, parameters: {
																{name: pos, class: Point}
														    }
		},
		{name: mouseDoubleClick, class: Function, parameters: {
																{name: pos, class: Point}
														      }
		}
	}
}!*/

/* \CellMorph */



/* WatcherMorph */

/*@
{
	var,
	name: WatcherMorph,
	class: Function,
	return: WatcherMorph,
	parameters:
	{
		{name: label, class: String},
		{name: color, class: Color},
		{name: target, class: {VariableFrame, SpriteMorph} },
		{name: getter, class: {{class: Function}, String} },
		{name: isHidden, class: Boolean}
	}
}
!*/

/*@
{
	name: WatcherMorph,
	class: BoxMorph,
	return: WatcherMorph,
	properties:
	{
		{name: parentThatIsA, class: Function, return: StageMorph},
	
		{name: constructor, class: Function, return: WatcherMorph},
		{name: uber, class: BoxMorph},
		{name: init, class: Function, parameters: {
														{name: label, class: String},
														{name: color, class: Color},
														{name: target, class: {VariableFrame, SpriteMorph} },
														{name: getter, class: {{class: Function}, String} },
														{name: isHidden, class: Boolean}
													 }
		},
		
		{name: labelText, class: String},
		{name: version, class: Joker},
		{name: objName, class: String},
		{name: readoutColor, class: Color},
		{name: style, class: String},
		{name: target, class: {VariableFrame, SpriteMorph} },
		{name: getter, class: {String, {class: Function} }},
		{name: currentValue, class: Joker},
		{name: labelMorph, class: StringMorph},
		{name: sliderMorph, class: SliderMorph},
		{name: cellMorph, class: CellMorph},
		{name: isDraggable, class: Boolean},
		
		{name: isTemporary, class: Function, return: Boolean},
		{name: object, class: Function, return: {VariableFrame, SpriteMorph} },
		{name: isGlobal, class: Function, return: Boolean, parameters: {
																			{name: selector, class: Joker}
																		   }
		},
		
		{name: setSliderMin, class: Function, parameters: {
																{name: num, class: Number},
																{name: noUpdate, class: Boolean},
															 }
		},
		{name: setSliderMax, class: Function, parameters: {
																{name: num, class: Number},
																{name: noUpdate, class: Boolean},
															 }
		},
		
		{name: update, class: Function},
		{name: updateLabel, class: Function},
		
		{name: fixLayout, class: Function},
		{name: userMenu, class: Function, return: MenuMorph},
		
		{name: setStyle, class: Function, parameters: {
															{name: style, class: String}
														 }
		},
		{name: styleNormal, class: Function},
		{name: styleLarge, class: Function},
		{name: styleSlider, class: Function},
		{name: userSetSliderMin, class: Function},
		{name: userSetSliderMax, class: Function},
		
		{name: drawNew, class: Function}
	}
}
!*/

/* \WatcherMorph */



/* StagePrompterMorph */

/*@
{
	var,
	name: StagePrompterMorph,
	class: Function,
	return: StagePrompterMorph,
	parameters:
	{
		{name: question, class: String}
	}
}
!*/

/*@
{
	name: StagePrompterMorph,
	class: BoxMorph,
	return: StagePrompterMorph,
	properties:
	{
		{name: constructor, class: Function, return: StagePrompterMorph},
		{name: uber, class: BoxMorph},
		{name: init, class: Function, parameters: {
														{name: question, class: String}
													 }
		},
		
		{name: isDone, class: Boolean},
		{name: label, class: StringMorph},
		{name: inputField, class: InputFieldMorph},
		{name: button, class: PushButtonMorph},
		
		{name: fixLayout, class: Function},
		{name: mouseClickLeft, class: Function},
		{name: accept, class: Function}
	}
}
!*/

/* \StagePrompterMorph */
